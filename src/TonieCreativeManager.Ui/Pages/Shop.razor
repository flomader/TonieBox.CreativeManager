@page "/shop"

@inject MediaService MediaService

@inject CreativeTonieService CreativeTonieService

@inject SessionService Session

@inject UserService UserService

@inject IHttpContextAccessor Accessor

<Header BackUrl="@backPath"></Header>

<Grid Items="items" RestrictItemWidth="true"></Grid>

@code {

    IEnumerable<GridItem> items;

    string backPath;

    protected override async Task OnInitializedAsync()
    {
        var path = Accessor.HttpContext.Request.Query["path"].ToString();
        var mediaItems = await MediaService.GetItems(path);
        var canBuy = await UserService.CanBuyItem(Session.UserId);

        backPath = string.IsNullOrEmpty(path)
            ? null
            : "javascript:history.back()";

        items = mediaItems
            .Where(item => item.Childs.Any() || !item.HasBought)
            .Select(item =>
            {
                var pathEncoded = item.Path.EncodeUrl();

                return new GridItem
                {
                    Name = item.Name,
                    Url = canBuy
                        ? item.Childs.Any()
                            ? $"/shop?path={pathEncoded}"
                            : $"/shop/buy/confirm?path={pathEncoded}"
                        : null,
                    ImageUrl = $"/cover?path={pathEncoded}",
                    SubImageUrl = item.Childs.Any() ? $"/cover?path=folder" : null,
                    Restricted = !canBuy
                };
            })
            .ToArray();
    }

}