@page "/browse"

@inject MediaService MediaService 

@inject CreativeTonieService CreativeTonieService

@inject SessionService Session

@inject IHttpContextAccessor Accessor 

<Header></Header>

@if (backPath != null)
{
    <a class="back mb-3" href="@backPath">Zurück</a>
}

<Grid Items="items" RestrictItemWidth="true"></Grid>

@code {

    IEnumerable<GridItem> items;

    string backPath;

    protected override async Task OnInitializedAsync()
    {
        var path = Accessor.HttpContext.Request.Query["path"].ToString();

        var mediaItems = await MediaService.GetItems(path);
        var tonies = await CreativeTonieService.GetTonies();

        backPath = string.IsNullOrEmpty(path)
            ? null
            : $"/browse?path={path.GetParentPath().EncodeUrl()}";

        items = mediaItems
            .Select(dir =>
            {
                var restricted = !dir.HasSubitems && !dir.HasBought;
                var pathEncoded = dir.Path.EncodeUrl();

                return new GridItem
                {
                    Name = dir.Name,
                    Url = dir.HasSubitems
                        ? $"/browse?path={pathEncoded}"
                        : restricted
                            ? $"/user/buy/confirm?path={pathEncoded}"
                            : $"/upload/selecttonie?path={pathEncoded}",
                    ImageUrl = $"/cover?path={pathEncoded}",
                    SubImageUrl = dir.HasSubitems
                         ? $"/cover?path=folder"
                         : dir.MappedTonieId != null
                             ? tonies.FirstOrDefault(t => dir.MappedTonieId == t.Id)?.ImageUrl
                             : null,
                    SubImageClass = dir.MappedTonieId != null ? "tonie" : null,
                    Restricted = restricted
                };
            })
            .ToArray();
    }

}